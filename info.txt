1/ Bootstrap «идея — функционал — вёрстка». как набор готовых элементов
+ Скорость
+ Кроссбраузерность - учитывают различия браузеров и оптимизированы таким образом, чтобы минимизировать различия между ними
+ Адаптивность - имеет готовую 12-колоночную сетку, по которой можно располагать компоненты.
+ Доступность
+ Низкий порог вхождения
- Вес проекта
- Дизайн
- Функционал
для создания кнопки используются два класса, один из которых отвечает за структуру кнопки, а другой за оформление. Такой подход называется OOCSS — Object Oriented CSS или объектно-ориентированный CSS.
<button class="btn btn-primary">Я — синяя кнопка</button>
Второй подход, который используется в Bootstrap — Atomic CSS. На нём построены утилиты во фреймворке. Atomic CSS — подход, при котором один класс использует одно свойство.

<section class="d-flex bg-white">
  <!-- HTML вёрстка -->
</section>
В этом примере тег <section> получит два свойства:

background-color: #fff;
display: flex;.

Этот фрагмент HTML использует классы из CSS-фреймворка Bootstrap, чтобы создать адаптивный макет страницы. Давайте разберемся, что означает каждый элемент:

html
Копіювати
Редагувати
<div class="row justify-content-center">
  <div class="col-md-6">
    <h2 class="mb-4">
1. <div class="row justify-content-center">
row — этот класс из Bootstrap используется для создания строки (или контейнера) внутри которой располагаются колонки. В Bootstrap весь макет базируется на системе сетки, где строка (row) делится на колонки (col).
justify-content-center — этот класс добавляет стиль, который выравнивает колонки по центру по горизонтали. Это значит, что элементы внутри этой строки будут размещены по центру.
В сумме, этот div создает контейнер-строку и выравнивает все вложенные элементы по центру.

2. <div class="col-md-6">
col-md-6 — этот класс из Bootstrap указывает, что элемент должен занимать 6 из 12 доступных частей сетки на устройствах с шириной экрана, равной или больше 768 пикселей (например, на ноутбуках и десктопах). В принципе, система сетки Bootstrap разделяет пространство на 12 частей, и col-md-6 означает, что этот элемент будет занимать половину ширины экрана на устройствах средней и большей ширины.
md — это означает, что правило применяется к экрану средней ширины и выше (по умолчанию, экраны с шириной 768 пикселей и больше).
6 — означает, что этот элемент займет 6 из 12 доступных колонок, т.е. 50% ширины контейнера.
Например, на мобильных устройствах, если ничего не указано, колонка будет занимать всю ширину, но на устройствах с более широким экраном (например, планшетах или компьютерах), она будет занимать половину ширины.

3. <h2 class="mb-4">
h2 — это заголовок второго уровня. В HTML заголовки от <h1> до <h6> используются для структурирования текста, где <h1> — самый важный заголовок, а <h6> — наименее важный.
class="mb-4" — это класс Bootstrap, который добавляет отступ (margin) в 4 единицы (обычно в пикселях). В данном случае это означает, что между заголовком и следующими элементами будет отступ.
В сумме:
Этот фрагмент создаёт структуру, где:

Вся строка (контейнер) выровнена по центру.
Внутри этой строки размещена колонка, которая будет занимать половину ширины экрана на средних устройствах и больше.
В этой колонке размещен заголовок второго уровня с отступом снизу.
Пример того, как это может выглядеть на веб-странице:

На мобильных устройствах:
Заголовок и форма или контент будут занимать всю ширину экрана.
На экранах средних и больших устройств:
Контент будет выровнен по центру и займет 50% ширины экрана.

2/ Если ошибка сохраняется, удалите файлы __pycache__:

find . -name "__pycache__" -type d -exec rm -rf {} +

или вручную удалите папку __pycache__ в shop/.

3/ мои заказы отредачити

4. В папке templates вашего Django проекта должны находиться HTML файлы, которые отвечают за отображение страниц вашего веб-приложения. Эти файлы используют шаблоны Django для отображения контента, который приходит с серверной стороны.

Чтобы правильно организовать структуру, давайте разберёмся, что должно быть в папке templates:
 templates в вашем Django проекте должна содержать все HTML-шаблоны для различных страниц сайта. Вам следует организовать структуру так, чтобы было легко управлять шаблонами, особенно если проект растет и включает несколько приложений.

1. Основные HTML файлы (Шаблоны)
В папке templates размещаются HTML файлы, которые отображают различные страницы вашего сайта. Например:

base.html — это базовый шаблон, который будет включать структуру всего сайта (например, шапку, подвал и общий стиль). Этот файл обычно включает блоки, которые переопределяются в других шаблонах.
catalog.html — шаблон для страницы с каталогом товаров.
cart.html — шаблон для страницы корзины покупок.
register.html — шаблон для страницы регистрации.
login.html — шаблон для страницы входа.

your_project/
│
├── templates/
│   ├── base.html           # основной шаблон
│   ├── catalog.html        # шаблон страницы каталога
│   ├── cart.html           # шаблон страницы корзины
│   ├── registration/
│   │   └── register.html   # шаблон страницы регистрации
│   └── account.html        # шаблон личного кабинета
│
└── static/
    └── css/
        └── styles.css

Нейминг для разных приложений (если они есть)
Если в проекте есть несколько приложений, лучше организовать папку templates для каждого приложения, чтобы избежать путаницы. Например, если у вас есть приложение shop, структура будет следующей:
your_project/
│
├── shop/
│   ├── templates/
│   │   └── shop/
│   │       ├── base.html
│   │       ├── catalog.html
│   │       └── cart.html
│   └── views.py
│
└── static/
    └── shop/
        └── css/
            └── styles.css

5/  Подключение файлов статики
Чтобы добавить файлы статики, такие как CSS, изображения или JavaScript, нужно использовать тег {% static 'путь/к/файлу' %} в шаблонах. Пример подключения CSS в базовый шаблон:

<link rel="stylesheet" href="{% static 'css/styles.css' %}">

6/Заготовки для форм и других компонентов
В папке templates могут быть различные компоненты для повторного использования, такие как:

Части навигации
Формы входа, регистрации и другие формы
Ошибки и сообщения
Пример шаблона для формы входа (например, login.html):
{% extends 'base.html' %}

{% block content %}
  <h2>Вход</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Войти</button>
  </form>
{% endblock %}

{% static 'css/style.css' %} указывает на файл CSS в папке static/css/.
{% static 'images/logo.png' %} указывает на файл изображения в папке static/images/.
{% static 'js/script.js' %} указывает на файл JavaScript в папке static/js/.


